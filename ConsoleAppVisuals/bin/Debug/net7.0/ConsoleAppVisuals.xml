<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConsoleAppVisuals</name>
    </assembly>
    <members>
        <member name="T:ConsoleAppVisuals.Core">
            <summary>
            The <see cref="T:ConsoleAppVisuals.Core"/> classe contains all the visual elements for a console app.
            Most of the elements are on a low abstraction level.
            </summary>
        </member>
        <member name="F:ConsoleAppVisuals.Core.DefaultHeader">
            <summary>
            This property is used to get and set the default header.
            </summary>
        </member>
        <member name="F:ConsoleAppVisuals.Core.DefaultFooter">
            <summary>
            This property is used to get and set the default footer.
            </summary>
        </member>
        <member name="P:ConsoleAppVisuals.Core.TitleHeight">
            <summary>
            This property is used to get the height of the title.
            </summary>
        </member>
        <member name="P:ConsoleAppVisuals.Core.HeaderHeigth">
            <summary>
            This property is used to get the height of the header.
            </summary>
        </member>
        <member name="P:ConsoleAppVisuals.Core.FooterHeigth">
            <summary>
            This property is used to get the height of the footer.
            </summary>
        </member>
        <member name="P:ConsoleAppVisuals.Core.ContentHeigth">
            <summary>
            This property is used to get the start line of the content.
            </summary>
        </member>
        <member name="P:ConsoleAppVisuals.Core.IsScreenUpdated">
            <summary>
            This property is used to check if the screen has been updated.
            </summary>
            <returns>True if the screen has been updated, false otherwise.</returns>
            <remarks>The screen is updated if the window size has changed or if the color panel has changed.</remarks>
        </member>
        <member name="M:ConsoleAppVisuals.Core.ChangeForeground(System.ConsoleColor)">
            <summary> 
            This method changes the font color of the console.
            </summary>
            <param name="color">The new font color.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.ChangeBackground(System.ConsoleColor)">
            <summary>
            This method changes the background color of the console.
            </summary>
            <param name="color">The new background color.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.LoadTitle(System.String)">
            <summary>
            This method is used to set the path of the title file.
            </summary>
            <param name="path">The path of the title file.</param>
            <remarks>If the path is empty, the title is not displayed. The file should be a .txt doc.</remarks>
        </member>
        <member name="M:ConsoleAppVisuals.Core.SetDefaultBanner(System.Nullable{System.ValueTuple{System.String,System.String,System.String}},System.Nullable{System.ValueTuple{System.String,System.String,System.String}})">
            <summary>
            This method is used to set the default header and footer.
            </summary>
            <param name="header">The default header input.</param>
            <param name="footer">The default footer input.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.ApplyNegative(System.Boolean)">
            <summary>
            This method changes the font and background colors of the console in order to apply
            a negative to highligth the text or not.
            </summary>
            <param name="negative">If true, the text is highlighted.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.UpdateScreen">
            <summary>
            This method is used to update the screen display if it has encountered a change.
            </summary>
        </member>
        <member name="M:ConsoleAppVisuals.Core.ClearLine(System.Nullable{System.Int32})">
            <summary>
            This method is used to Clear a specified line in the console.
            </summary>
            <param name="line">The line to clear.If null, will be cleared where the cursor is.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.ClearMultipleLines(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary> 
            This method clears a specified part of the console.
            </summary>
            <param name="line">The index of the first line to clear.</param>
            <param name="length">The number of lines to clear.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.ClearContent">
            <summary>
            This method clears the console EXCEPT the header and above, and the footer and below
            </summary>
        </member>
        <member name="M:ConsoleAppVisuals.Core.ClearWindow">
            <summary>
            This method clears the window and resets the color panel to the default one.
            </summary>
        </member>
        <member name="M:ConsoleAppVisuals.Core.WritePositionnedString(System.String,ConsoleAppVisuals.Placement,System.Boolean,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            This method is used to write a string positionned in the console.
            </summary>
            <param name="str">The string to write.</param>
            <param name="position">The position of the string in the console.</param>
            <param name="negative">If true, the text is highlighted.</param>
            <param name="line">The line where the string is written in the console. If null, will be written where the cursor is.</param>
            <param name="writeLine">If true, the string is written with a line break.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.WriteContinuousString(System.String,System.Nullable{System.Int32},System.Boolean,System.Int32,System.Int32,System.Nullable{System.Int32},ConsoleAppVisuals.Placement,System.Boolean)">
            <summary>
            This method is used to write a string continuously in the console.
            The string is written letter by letter on the console.
            </summary>
            <param name="str">The string to write.</param>
            <param name="line">The line where the string is written in the console. If null, will be written where the cursor is.</param>
            <param name="negative">If true, the text is highlighted.</param>
            <param name="printTime">The total time to write the string in ms.</param>
            <param name="additionalTime">The additional time to wait after the string is written in ms.</param>
            <param name="length">The length of the string. If null, the length is the window width.</param>
            <param name="position">The position of the string in the console.</param>
            <param name="writeLine">If true, the string is written with a line break.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.WriteMatrix(System.Single[0:,0:],ConsoleAppVisuals.Position,System.Nullable{System.Int32})">
            <summary> 
            This method prints a float matrix in the console.
            </summary>
            <param name="matrix">The matrix to write on the console.</param>
            <param name="currentPosition">The current position of the cursor.</param>
            <param name="line">The line where the matrix will be printed.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.WriteTitle">
            <summary> 
            This method prints the title in the console if the title is not empty. 
            </summary>
        </member>
        <member name="M:ConsoleAppVisuals.Core.WriteBanner(System.Boolean,System.Boolean,System.Nullable{System.ValueTuple{System.String,System.String,System.String}})">
            <summary> 
            This method prints a banner in the console. 
            </summary>
            <param name="banner">The banner to print.</param>
            <param name="header">If true, the banner is printed at the top of the console. If false, the banner is printed at the bottom of the console.</param>
            <param name="continuous">If true, the title is not continuously printed.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.WritePrompt(System.String,System.Nullable{System.Int32})">
            <summary> This method prints a message in the console and gets a string written by the user. </summary>
            <param name="message"> The message to print. </param>
            <param name="line"> The line where the message will be printed. </param>
            <returns> The string written by the user. </returns>
        </member>
        <member name="M:ConsoleAppVisuals.Core.WriteParagraph(System.Boolean,System.Nullable{System.Int32},System.String[])">
            <summary> 
            This method prints a paragraph in the console. 
            </summary>
            <param name="negative">If true, the paragraph is printed in the negative colors.</param>
            <param name="line">The height of the paragraph.</param>
            <param name="text">The lines of the paragraph.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.ScrollingMenuSelector(System.String,System.Nullable{System.Int32},System.String[])">
            <summary> 
            This method prints a menu in the console and gets the choice of the user. 
            </summary>
            <param name="question">The question to print.</param>
            <param name="line">The line where the menu is printed.</param>
            <param name="choices">The choices of the menu.</param>
            <returns>An integer representing the choice of the user.</returns>
        </member>
        <member name="M:ConsoleAppVisuals.Core.ScrollingNumberSelector(System.String,System.Single,System.Single,System.Single,System.Single,System.Nullable{System.Int32})">
            <summary> 
            This method prints a menu in the console and gets the choice of the user. 
            </summary>
            <param name="question">The question to print.</param>
            <param name="min">The minimum value of the number.</param>
            <param name="max">The maximum value of the number.</param>
            <param name="start">The starting value of the number.</param>
            <param name="step">The step of the number.</param>
            <param name="line">The line where the menu is printed.</param>
            <returns>The number chose of the user.</returns>
        </member>
        <member name="M:ConsoleAppVisuals.Core.MatrixSelector(System.Single[0:,0:],System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary> 
            This method prints a matrix selector in the console. 
            </summary>
            <param name="matrix">The matrix to print.</param>
            <param name="line">The line where the matrix will be printed.</param>
            <param name="questionNav">The question message</param>
            <param name="continueNav">The continue message</param>
            <param name="confirmNav">the confirm message</param>
            <param name="backNav">The back message</param>
            <param name="instructionNumber">The instruction to choose a number to print.</param>
            <param name="instructionsInit">The instructions to navigate into the matrix to print. No lines limitations.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.LoadingBar(System.String,System.Nullable{System.Int32})">
            <summary> 
            This method prints a loading screen in the console. 
            </summary>
            <param name="message">The message to print.</param>
            <param name="line">The line where the message will be printed.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.ProcessLoadingBar(System.String,System.Single@,System.Nullable{System.Int32})">
            <summary>
            This method prints a loading bar in the console linked with a process percentage so that the loading bar is updated.
            </summary>
            <param name="message">The message to print.</param>
            <param name="processPercentage">The percentage of the process.</param>
            <param name="line">The line where the message will be printed.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.WriteFullScreen(System.Boolean,System.Nullable{System.ValueTuple{System.String,System.String,System.String}},System.Nullable{System.ValueTuple{System.String,System.String,System.String}})">
            <summary> 
            This method prints a full screen in the console with a title, a header and a footer.
            </summary>
            <param name="continuous">If true, the title is not continuously printed.</param>
            <param name="header">The header of the screen.</param>
            <param name="footer">The footer of the screen.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Core.ProgramExit(System.String)">
            <summary>
            This method exits the program. 
            </summary>
            <param name="message">The message to print on the exit of the program.</param>
        </member>
        <member name="T:ConsoleAppVisuals.Extensions">
            <summary>
            This class provides extensions for System classes.
            </summary>
        </member>
        <member name="M:ConsoleAppVisuals.Extensions.ResizeString(System.String,System.Int32,ConsoleAppVisuals.Placement,System.Boolean)">
            <summary>
            This method builds a string with a specific size and a specific placement.
            </summary>
            <param name="str">The string to build.</param>
            <param name="size">The size of the string.</param>
            <param name="position">The placement of the string.</param>
            <param name="truncate">If true, the string is truncated if it is too long.</param>
            <returns>The built string.</returns>
            <example> 
            The following example shows how to call the <see cref="M:ConsoleAppVisuals.Extensions.ResizeString(System.String,System.Int32,ConsoleAppVisuals.Placement,System.Boolean)"/> method :
            <code>
            string str = "Hello World";
            string str2 = str.ResizeString(20, Placement.Right, true);
            </code>
            The value of str2 will be "        Hello World".
            </example>
        </member>
        <member name="M:ConsoleAppVisuals.Extensions.BannerToString(System.ValueTuple{System.String,System.String,System.String})">
            <summary>
            This method is used to convert the banner tuple into a string.
            </summary>
            <param name="banner">The banner tuple.</param>
            <returns>The banner as a string.</returns>
        </member>
        <member name="T:ConsoleAppVisuals.Placement">
            <summary>
            The <see cref="T:ConsoleAppVisuals.Placement"/> enum defines the placement of a string in some space. 
            It could be another string or a console line.
            </summary>
        </member>
        <member name="F:ConsoleAppVisuals.Placement.Left">
            <summary>
            The string is placed at the left of the console.
            </summary>
        </member>
        <member name="F:ConsoleAppVisuals.Placement.Center">
            <summary>
            The string is placed at the center of the console. 
            </summary>
        </member>
        <member name="F:ConsoleAppVisuals.Placement.Right">
            <summary>
            The string is placed at the right of the console.
            </summary>
        </member>
        <member name="T:ConsoleAppVisuals.Position">
            <summary>
            A class that stores the position into X and Y parameters of a position.
            </summary>
        </member>
        <member name="F:ConsoleAppVisuals.Position.X">
            <summary>
            The x coordinate of the position.
            </summary>
        </member>
        <member name="F:ConsoleAppVisuals.Position.Y">
            <summary>
            The y coordinate of the position.
            </summary>
        </member>
        <member name="M:ConsoleAppVisuals.Position.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ConsoleAppVisuals.Position"/> class with 2 coordinates.
            </summary>
            <param name="x">The x coordinate of the position.</param>
            <param name="y">The y coordinate of the position.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Position.#ctor(ConsoleAppVisuals.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:ConsoleAppVisuals.Position"/> class with another instance of the <see cref="T:ConsoleAppVisuals.Position"/> class.
            </summary>
            <param name="pos">The position to copy.</param>
        </member>
        <member name="M:ConsoleAppVisuals.Position.ToString">
            <summary>
            This method is used to convert the position to a string.
            </summary>
            <returns>The position as a string.</returns>
        </member>
        <member name="M:ConsoleAppVisuals.Position.Equals(System.Object)">
            <summary>
            This method is used to check if the position is equal to another position.
            </summary>
            <param name="obj">The position to compare to.</param>
            <returns>True if the positions are equal, false otherwise.</returns>
        </member>
        <member name="M:ConsoleAppVisuals.Position.GetHashCode">
            <summary>
            Implementation of the IEquatable interface.
            </summary>
            <returns>An integer representing the hash code of the position.</returns>
        </member>
        <member name="M:ConsoleAppVisuals.Position.System#IEquatable{ConsoleAppVisuals#Position}#Equals(ConsoleAppVisuals.Position)">
            <summary>
            Implementation of the IEquatable interface.
            </summary>
            <param name="other">The position to compare to.</param>
            <returns>True if the positions are equal, false otherwise.</returns>
        </member>
        <member name="M:ConsoleAppVisuals.Position.op_Equality(ConsoleAppVisuals.Position,ConsoleAppVisuals.Position)">
            <summary>
            This operator is used to check if the position is equal to another position.
            </summary>
            <param name="left">The first position to compare.</param>
            <param name="right">The second position to compare.</param>
            <returns>True if the positions are equal, false otherwise.</returns>
        </member>
        <member name="M:ConsoleAppVisuals.Position.op_Inequality(ConsoleAppVisuals.Position,ConsoleAppVisuals.Position)">
            <summary>
            This operator is used to check if the position is not equal to another position.
            </summary>
            <param name="left">The first position to compare.</param>
            <param name="right">The second position to compare.</param>
            <returns>True if the positions are not equal, false otherwise.</returns>
        </member>
    </members>
</doc>
